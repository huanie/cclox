module;

import std.compat;
import compiler;
import debug;
import chunk;
import error_reporter;

export module vm;

export namespace Lox {
  enum class ResultStatus { OK, StaticError, DynamicError };

  class VM {
  public:
    ResultStatus interpret(std::string_view source, unsigned line);

  private:
    void execute();

    template<typename T>
    bool peekIs() const;
    template<typename T>
    bool peekSecondIs() const;
    Value pop();

    template<typename T>
    T expect(std::string&& errorMessage, bool shouldPop) {
      if (!peekIs<T>()) throw LoxError { chunk_->getPosition(offset_), std::move(errorMessage) };

      return std::get<T>(shouldPop ? pop() : valueStack_.back());
    }

    double peekNumberOperand();
    double popNumberOperand();
    std::string peekStringOperand();
    std::string popStringOperand();

    ErrorReporter errorReporter_ {};
    Compiler compiler_ { errorReporter_ };
    std::vector<Value> valueStack_ {};
    std::unordered_map<std::string, Value> globals_ {};
#ifndef NDEBUG
    ChunkPrinter chunkPrinter_ {};
#endif

    std::unique_ptr<Chunk> chunk_;
    size_t offset_ { 0 };
  };
}
